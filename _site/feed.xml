<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2020-01-18T16:22:09+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Chromicle</title><subtitle>blog and more
</subtitle><author><name>Ajay prabhakar</name><email>ajayprabhakar369@gmail.com</email></author><entry><title type="html">Firebase Android — Realtime Database</title><link href="http://localhost:4000/blog/2019-08-18-FirebaseRealtimeDatabase/" rel="alternate" type="text/html" title="Firebase Android — Realtime Database" /><published>2019-08-18T00:00:00+05:30</published><updated>2019-08-18T00:00:00+05:30</updated><id>http://localhost:4000/blog/FirebaseRealtimeDatabase</id><content type="html" xml:base="http://localhost:4000/blog/2019-08-18-FirebaseRealtimeDatabase/">&lt;p&gt;Hello everyone, From the past some of the projects I used firebase very often so, I think it is really helpfull if I share how to use Firebase Realtime Database to build a realtime database for our app.&lt;/p&gt;

&lt;h2 id=&quot;what-is-firebase-realtime-database&quot;&gt;What is Firebase Realtime Database&lt;/h2&gt;

&lt;p&gt;The Firebase Realtime Database is basically a cloud hosted database stored in JSON format, it offers automatic offline support and it’s synchronised in realtime with every connected client. Let’s see what that means in more detail:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Realtime Synchronisation:&lt;/strong&gt; Firebase realtime database uses data synchronisation, so every time the data changes will get updated, no more traditional HTPP requests needed, you can do it very simple&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Offline Support:&lt;/strong&gt; with firebase you can do automatic sync when the app goes back online, so don’t need to worry about offline status. You can let your users add, edit and remove data when they’re offline, and the firebase will take care of syncing everything properly when the app is back online.&lt;/p&gt;

&lt;p&gt;Firebase now offers another cloud hosted database called &lt;a href=&quot;https://firebase.google.com/docs/firestore/&quot;&gt;Cloud Firestore&lt;/a&gt;. According to Firebase, this new solution to improve on top of Firebase Realtime Database, and it offers a more cool data models, and also has faster queries and can scales better, and our app is quite small, You can check a list of the main differences between both in the &lt;code class=&quot;highlighter-rouge&quot;&gt;[Choose a Database](https://firebase.google.com/docs/database/rtdb-vs-firestore)&lt;/code&gt; section on the Firebase docs website.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;time-to-build-something&quot;&gt;Time to build something&lt;/h2&gt;

&lt;p&gt;The plan is to build something I done with my past project &lt;a href=&quot;https://github.com/amfoss/TempleApp&quot;&gt;TempleApp&lt;/a&gt; so, I am explainig with I done😄. As usual, let’s start with adding dependencies and add the following line to our application level &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;implementation ‘com.google.firebase:firebase-database:16.0.1’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, we’re going to create a simple data class to represent the data we want to save for the user, let’s use something every one likes as an example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class PoojaUtils {
    String poojaDate, pilgrimName, poojaName, poojaAmount;

    public PoojaUtils() {}

    public PoojaUtils(String poojaDate, String pilgrimName, String poojaName, String poojaAmount) {
        this.poojaDate = poojaDate;
        this.pilgrimName = pilgrimName;
        this.poojaName = poojaName;
        this.poojaAmount = poojaAmount;
    }

    public void setPoojaDate(String poojaDate) {
        this.poojaDate = poojaDate;
    }

    public void setPilgrimName(String pilgrimName) {
        this.pilgrimName = pilgrimName;
    }

    public void setPoojaName(String poojaName) {
        this.poojaName = poojaName;
    }

    public void setPoojaAmount(String poojaAmount) {
        this.poojaAmount = poojaAmount;
    }

    public String getPoojaDate() {
        return poojaDate;
    }

    public String getPilgrimName() {
        return pilgrimName;
    }

    public String getPoojaName() {
        return poojaName;
    }

    public String getPoojaAmount() {
        return poojaAmount;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool, we have our &lt;code class=&quot;highlighter-rouge&quot;&gt;PoojsUtils&lt;/code&gt; data class and now we just need to create our simple UI to allow the user to store and visualise his poojas, we’ll look at it later when writing data to our realtime database.&lt;/p&gt;

&lt;p&gt;So, for the UI, we’ll add a button in our &lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity&lt;/code&gt; to open a new &lt;code class=&quot;highlighter-rouge&quot;&gt;AddPoojaActivity&lt;/code&gt; and in here the top part will be a basic form for the user to add his games, and the bottom section will be a recycler view to list those&lt;/p&gt;

&lt;table&gt;
     &lt;tr&gt;
          &lt;td&gt;&lt;img height=&quot;500&quot; src=&quot;https://user-images.githubusercontent.com/48018942/72662481-aaa2c000-3a0d-11ea-82af-0ef696c77fe8.jpg&quot; /&gt;&lt;br /&gt;&lt;center&gt;&lt;b&gt;AddPoojaActivity&lt;/b&gt;&lt;/center&gt;&lt;/td&gt;
          &lt;td&gt;&lt;img height=&quot;500&quot; src=&quot;https://user-images.githubusercontent.com/48018942/72662494-c60dcb00-3a0d-11ea-9030-e80f14eded6f.jpg&quot; /&gt;&lt;br /&gt;&lt;center&gt;&lt;b&gt;MainActivity&lt;/b&gt;&lt;/center&gt;&lt;/td&gt;
     &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;enabling-realtime-database-and-setting-rules&quot;&gt;Enabling Realtime Database and setting Rules&lt;/h2&gt;

&lt;p&gt;Before looking into how to write and read data to/from our Firebase Realtime Database, we also need to enable it on the Firebase Console, and when doing that, it’s important to look at the rules for it. With the Firebase Realtime Database Rules we can set how and when our data can be read from and written, other things like how the data is structured and indexed. This is how the 3 most common rules look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// These rules don't allow anyone read or write access to your database
{
  &quot;rules&quot;: {
    &quot;.read&quot;: false,
    &quot;.write&quot;: false
  }
}

// These rules give anyone, even people who are not users of your app,
// read and write access to your database
{
  &quot;rules&quot;: {
    &quot;.read&quot;: true,
    &quot;.write&quot;: true
  }
}

// These rules grant access to a node matching the authenticated
// user's ID from the Firebase auth token
{
  &quot;rules&quot;: {
    &quot;users&quot;: {
      &quot;$uid&quot;: {
        &quot;.read&quot;: &quot;$uid === auth.uid&quot;,
        &quot;.write&quot;: &quot;$uid === auth.uid&quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When enabling the realtime database on the console we have to click on get starteds.
we’ll pick option 2 with public read and write access. We’ll have a shared database of poojas that everyone can contribute to and read from😄 If you want to know more about to setup proper rules you can check the official &lt;a href=&quot;https://firebase.google.com/docs/database/security/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;write-data&quot;&gt;Write data&lt;/h2&gt;

&lt;p&gt;Now that we have our database created let’s go ahead and see how we can write data there using the form in our AddPoojaActivity:&lt;/p&gt;

&lt;p&gt;we will focus in the important part. The only important piece missing is how to get our &lt;code class=&quot;highlighter-rouge&quot;&gt;databaseReference&lt;/code&gt; but it’s as easy as this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;databaseReference = FirebaseDatabase.getInstance_()_._reference_
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With our database reference sorted, let’s analyse the rest of the code:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class AddPoojaActivity extends AppCompatActivity {

    @BindView(R.id.editTextDate)
    EditText editTextDate;

    @BindView(R.id.btn_date)
    Button btnDate;

    @BindView(R.id.btnRegister)
    Button btnRegister;

    @BindView(R.id.btnPrint)
    Button btnPrint;

    @BindView(R.id.editTextPilgrimName)
    EditText editTextPilgrimName;

    @BindView(R.id.editTextPoojaName)
    EditText editTextPoojaName;

    @BindView(R.id.editTextPoojaAmount)
    EditText editTextPoojaAmount;

    private Bundle bundle;

    private UserUtils user;
    private int mYear, mMonth, mDay;
    private String poojaDate, pilgrimName, poojaName, poojaAmount;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.add_pooja);
        ButterKnife.bind(this);

        user = new UserUtils();
    }

    @OnClick(R.id.btn_date)
    public void datePickerDialoge(View view) {
        final Calendar c = Calendar.getInstance();
        mYear = c.get(Calendar.YEAR);
        mMonth = c.get(Calendar.MONTH);
        mDay = c.get(Calendar.DAY_OF_MONTH);

        DatePickerDialog datePickerDialog =
                new DatePickerDialog(
                        this,
                        new DatePickerDialog.OnDateSetListener() {
                            @Override
                            public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {

                                poojaDate = dayOfMonth + &quot;-&quot; + (monthOfYear + 1) + &quot;-&quot; + year;
                                editTextDate.setText(poojaDate);
                            }
                        },
                        mYear,
                        mMonth,
                        mDay);
        datePickerDialog.show();
    }

    @OnClick(R.id.btnRegister)
    public void registerPooja(View view) {

        getPoojaValues();
        if (!checkErrors()) {
            return;
        }
        verifyDetails();
    }

    @OnClick(R.id.btnDetailsCorrect)
    public void uploadPoojaDetails(View view) {
        String id = poojaDb.push().getKey();

        PoojaUtils poojaDetails = new PoojaUtils(poojaDate, pilgrimName, poojaName, poojaAmount);
        poojaDb
                .child(DB_POOJAS_NAME)
                .child(id)
                .setValue(poojaDetails)
                .addOnSuccessListener(
                        new OnSuccessListener&amp;lt;Void&amp;gt;() {
                            @Override
                            public void onSuccess(Void aVoid) {
                                Toast.makeText(ConfirmDetailsPoojaActivity.this, &quot;Pooja Added&quot;, Toast.LENGTH_SHORT)
                                        .show();
                            }
                        })
                .addOnFailureListener(
                        new OnFailureListener() {
                            @Override
                            public void onFailure(@NonNull Exception e) {
                                Toast.makeText(ConfirmDetailsPoojaActivity.this, e.getMessage(), Toast.LENGTH_SHORT)
                                        .show();
                            }
                        });
    }

    private boolean checkErrors() {
        EditText[] allFields = {
            editTextDate, editTextPilgrimName, editTextPoojaAmount, editTextPoojaName
        };
        List&amp;lt;EditText&amp;gt; ErrorFields = new ArrayList&amp;lt;EditText&amp;gt;();
        for (EditText edit : allFields) {
            if (TextUtils.isEmpty(edit.getText())) {
                ErrorFields.add(edit);
                for (int i = 0; i &amp;lt; ErrorFields.size(); i++) {
                    EditText currentField = ErrorFields.get(i);
                    currentField.setError(&quot;this field required&quot;);
                    currentField.requestFocus();
                    return false;
                }
            }
        }
        return true;
    }

    private void getPoojaValues() {
        pilgrimName = editTextPilgrimName.getText().toString().trim();
        poojaAmount = editTextPoojaAmount.getText().toString().trim();
        poojaName = editTextPoojaName.getText().toString().trim();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;By using &lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt; we’re basically adding an element on the &lt;code class=&quot;highlighter-rouge&quot;&gt;PoojaUtils&lt;/code&gt; table on Firebase. The first time we do this, if the table doesn’t exist it just gets created. Firebase adds an element and automatically generates and return the ID for that element that we can use later to update the value.&lt;/li&gt;
  &lt;li&gt;we basically create a &lt;code class=&quot;highlighter-rouge&quot;&gt;poojaUtils&lt;/code&gt; instance to whatever was submitted in the form, easy right.&lt;/li&gt;
  &lt;li&gt;we just tell the adapter we added a new game to the list and that’s it we’re done.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And this is how easy it is to write data, let’s go ahead and use the form to add some of my favourite games, so many hours spent on these 😄. If we go back to the Firebase Console now, we can see how the 3 games were added to our database:&lt;/p&gt;

&lt;h2 id=&quot;read-data&quot;&gt;Read data&lt;/h2&gt;

&lt;p&gt;Writing data is sorted, let’s look at how to read data from our database. With Firebase Realtime Database is really simple, it basically works using event listeners on the data, so it’s a very common callback pattern that we’re all very used to, let’s see:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class PoojaFragment extends Fragment {

    @BindView(R.id.fab_pooja)
    FloatingActionButton fab;

    @BindView(R.id.poojaRecyclerView)
    RecyclerView poojaRecycleView;

    @BindView(R.id.poojaprogressBarLoading)
    ProgressBar poojaProgressBar;

    @BindView(R.id.textViewAddPooja)
    TextView textViewAddPooja;

    List&amp;lt;PoojaUtils&amp;gt; poojaUtilsArrayList;
    PoojaAdapter poojaAdapter;

    DatabaseReference poojaDb;

    public PoojaFragment() {
        // Required empty public constructor
    }

    @Override
    public View onCreateView(
            LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View rootView = inflater.inflate(R.layout.fragment_pooja, container, false);
        ButterKnife.bind(this, rootView);

        addFirebaseInstance();

        fetchPoojas();

        return rootView;
    }

    private void fetchPoojas() {

        poojaRecycleView.setLayoutManager(new LinearLayoutManager(getContext()));

        poojaUtilsArrayList = new ArrayList&amp;lt;&amp;gt;();

        poojaDb.addValueEventListener(
                new ValueEventListener() {
                    @Override
                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                        for (DataSnapshot postSnapshot : dataSnapshot.getChildren()) {
                            PoojaUtils poojaValue = postSnapshot.getValue(PoojaUtils.class);
                            poojaUtilsArrayList.add(poojaValue);
                        }

                        poojaAdapter = new PoojaAdapter(getActivity(), poojaUtilsArrayList);
                        poojaRecycleView.setAdapter(poojaAdapter);
                        poojaProgressBar.setVisibility(View.GONE);
                        changeFabPosition();
                    }

                    @Override
                    public void onCancelled(@NonNull DatabaseError databaseError) {
                        Toast.makeText(getContext(), databaseError.getMessage(), Toast.LENGTH_SHORT).show();
                    }
                });
    }

    private void addFirebaseInstance() {
        UserUtils user = new UserUtils();
        String dbUserName = user.getDbUserName();
        poojaDb = FirebaseDatabase.getInstance().getReference(dbUserName).child(&quot;poojas&quot;);
    }

    private void changeFabPosition() {
        RelativeLayout.LayoutParams lay =
                new RelativeLayout.LayoutParams(
                        ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        lay.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
        lay.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        lay.setMargins(2, 2, 75, 75);
        fab.setLayoutParams(lay);
        textViewAddPooja.setVisibility(View.GONE);
    }

    @OnClick(R.id.fab_pooja)
    public void setUpFab(View view) {
        Intent intent = new Intent(getActivity(), AddPoojaActivity.class);
        startActivity(intent);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code is quite self explanatory, but as with the reading part, let’s analyse it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;we add a &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueEventListener&lt;/code&gt; to our table reference and implement the required methods, so every time there’s a change on the &lt;code class=&quot;highlighter-rouge&quot;&gt;poojaUtils&lt;/code&gt; table in the database we get notified and receive a data snapshot of the database table.&lt;/li&gt;
  &lt;li&gt;we’re just showing a Toast in case of error when trying to read from the database.&lt;/li&gt;
  &lt;li&gt;we just extract the actual list of games from the DataSnapshot object and pass it to our adapter. If we implement a diff callback (which I didn’t 😃)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And if writing was easy, reading is even more, right? This is all we need to do to be constantly listening for events on the database. In a more realistic example we should keep a reference to our &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueEventListener&lt;/code&gt; so we can unsubscribe when required.&lt;/p&gt;

&lt;p&gt;If we just want to read the data once and not get all the update events we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;addListenerForSingleValueEvent()&lt;/code&gt; function instead. When dealing with lists like in our case there’s also an option to get notified of events on a single child on the database table. Not relevant for our example, but if we want that we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;addChildEventListener()&lt;/code&gt; function and pass an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;ChildEventListener&lt;/code&gt; that will give us more events.&lt;/p&gt;

&lt;p&gt;You can get more reference at &lt;a href=&quot;https://github.com/amfoss/TempleApp&quot;&gt;sourcecode&lt;/a&gt;&lt;/p&gt;</content><author><name>Ajay prabhakar</name><email>ajayprabhakar369@gmail.com</email></author><summary type="html">Hello everyone, From the past some of the projects I used firebase very often so, I think it is really helpfull if I share how to use Firebase Realtime Database to build a realtime database for our app.</summary></entry><entry><title type="html">How to Drag or swipe in RecyclerView</title><link href="http://localhost:4000/blog/2019-07-16-How-to-Drag-or-swipe-in-RecyclerView/" rel="alternate" type="text/html" title="How to Drag or swipe in RecyclerView" /><published>2019-07-16T00:00:00+05:30</published><updated>2019-07-16T00:00:00+05:30</updated><id>http://localhost:4000/blog/How-to-Drag-or-swipe-in-RecyclerView</id><content type="html" xml:base="http://localhost:4000/blog/2019-07-16-How-to-Drag-or-swipe-in-RecyclerView/">&lt;p&gt;&lt;img src=&quot;https://chromicle.files.wordpress.com/2019/05/gestures-tap-swipe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Drag or swipe&lt;/p&gt;

&lt;p&gt;There’s actually a &lt;strong&gt;really simple&lt;/strong&gt; way to add these features to RecyclerView. It only requires one class, and it’s already part of the Android Support Library called “ItemTouchHelper”&lt;/p&gt;

&lt;p&gt;By the help of ItemTouchHelper we can add the swipe and drag features by adding sub class. It’s a subclass of &lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemDecoration.html&quot;&gt;RecyclerView.ItemDecoration&lt;/a&gt;, I’ll demonstrate a simple implementation of ItemTouchHelper.&lt;/p&gt;

&lt;h3 id=&quot;setting-up&quot;&gt;Setting up&lt;/h3&gt;

&lt;p&gt;First thing we need is a basic RecyclerView setup. If you haven’t already, update your build.gradle to include the RecyclerView dependency.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compile 'com.android.support:recyclerview-v7:22.2.0'&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;by-itemtouchhelper-and-itemtouchhelpercallback&quot;&gt;BY ItemTouchHelper and ItemTouchHelper.Callback&lt;/h3&gt;

&lt;p&gt;In order to use ItemTouchHelper, you’ll create an &lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html&quot;&gt;ItemTouchHelper.Callback&lt;/a&gt;. This is the interface that allows you to listen for “move” and “swipe” events. It’s also where you are able to control the state of the view selected, and override the default animations. There’s a helper class that you can use if you want a basic implementation, &lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.SimpleCallback.html&quot;&gt;SimpleCallback&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;The main callbacks that we must override to enable basic drag &amp;amp; drop and swipe-to-dismiss are:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;getMovementFlags(RecyclerView, ViewHolder) 
onMove(RecyclerView, ViewHolder, ViewHolder) 
onSwiped(ViewHolder, int)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;We can also use a some of helpers:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;isLongPressDragEnabled()
isItemViewSwipeEnabled()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We’ll go through them one by one.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override  
public int getMovementFlags(RecyclerView recyclerView,   
        RecyclerView.ViewHolder viewHolder) {  
    int dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;  
    int swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;  
    return makeMovementFlags(dragFlags, swipeFlags);  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will help you get the direction. You must override &lt;strong&gt;getMovementFlags&lt;/strong&gt;() to specify which directions of drags and swipes. Use the helper &lt;strong&gt;ItemTouchHelper.makeMovementFlags(int, int)&lt;/strong&gt; to build the returned flags. We’re enabling dragging and swiping in both directions here.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override  
public boolean isLongPressDragEnabled() {  
    return true;  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ItemTouchHelper can be used for drag &lt;em&gt;without&lt;/em&gt; swipe (or vice versa), so you must designate exactly what you wish to support. Implementations should return true from &lt;strong&gt;isLongPressDragEnabled()&lt;/strong&gt; will detect when we long press the any item in recyclerView&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override  
public boolean isItemViewSwipeEnabled() {  
    return true;  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to enable swiping we have to return true from &lt;strong&gt;isItemViewSwipeEnabled&lt;/strong&gt;().&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;onMove()&lt;/strong&gt; and &lt;strong&gt;onSwiped()&lt;/strong&gt; are used to notify anything of updating data. So first we’ll create an interface that allows us to pass these event callbacks back.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface ItemTouchHelperAdapter {  
  
    void onItemMove(int fromPosition, int toPosition);  
  
    void onItemDismiss(int position);  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;ItemTouchHelper.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class RecyclerListAdapter extends   
        RecyclerView.Adapter&amp;lt;ItemViewHolder&amp;gt;   
        implements ItemTouchHelperAdapter {

@Override  
public void onItemDismiss(int position) {  
    mItems.remove(position);  
    notifyItemRemoved(position);  
}  
  
@Override  
public boolean onItemMove(int fromPosition, int toPosition) {  
    if (fromPosition &amp;lt; toPosition) {  
        for (int i = fromPosition; i &amp;lt; toPosition; i++) {  
            Collections.swap(mItems, i, i + 1);  
        }  
    } else {  
        for (int i = fromPosition; i &amp;gt; toPosition; i--) {  
            Collections.swap(mItems, i, i - 1);  
        }  
    }  
    notifyItemMoved(fromPosition, toPosition);  
    return true;  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s very important to call &lt;strong&gt;notifyItemRemoved()&lt;/strong&gt; and &lt;strong&gt;notifyItemMoved()&lt;/strong&gt; so the Adapter can identify the changes.&lt;/p&gt;

&lt;p&gt;Now we can go back to building our &lt;strong&gt;SimpleItemTouchHelperCallback&lt;/strong&gt; as we still must override onMove() and onSwiped(). First add a constructor and a field for the Adapter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private final ItemTouchHelperAdapter mAdapter;  
  
public SimpleItemTouchHelperCallback(  
        ItemTouchHelperAdapter adapter) {  
    mAdapter = adapter;  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then override the remaining events and notify the adapter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override  
public boolean **onMove**(RecyclerView recyclerView,   
        RecyclerView.ViewHolder viewHolder,   
        RecyclerView.ViewHolder target) {

mAdapter.onItemMove(viewHolder.getAdapterPosition(),   
            target.getAdapterPosition());

    return true;  
}

@Override  
public void onSwiped(RecyclerView.ViewHolder viewHolder,   
        int direction) {  
    mAdapter.onItemDismiss(viewHolder.getAdapterPosition());  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;With our Callback, we can create our ItemTouchHelper and call &lt;strong&gt;attachToRecyclerView(RecyclerView):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ItemTouchHelper.Callback callback =   
new SimpleItemTouchHelperCallback(adapter);  
ItemTouchHelper touchHelper= new ItemTouchHelper(callback);  
touchHelper.attachToRecyclerView(recyclerView);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks Happy coding :)&lt;/p&gt;</content><author><name>Ajay prabhakar</name><email>ajayprabhakar369@gmail.com</email></author><summary type="html"></summary></entry><entry><title type="html">Day out at munroe</title><link href="http://localhost:4000/blog/2019-06-30-day-out-at-munroe/" rel="alternate" type="text/html" title="Day out at munroe" /><published>2019-06-30T00:00:00+05:30</published><updated>2019-06-30T00:00:00+05:30</updated><id>http://localhost:4000/blog/day-out-at-munroe</id><content type="html" xml:base="http://localhost:4000/blog/2019-06-30-day-out-at-munroe/">&lt;p&gt;Recently the amFOSS club members planned to keep a day off and plan for a trip. Upon Vipin Sir’s suggestion, six of us went to Munroe Island and spent a whole day there. I would like to share the experience of the trip in this blog post.&lt;/p&gt;

&lt;p&gt;Munroe Island or Mundrothuruthu is an inland island group formed at the confluence of the backwaters of the Ashtamudi Lake and Kallada River. We went to the Island by taking a train from Oachira to Munroturuttu railway station. Just costed 10 rupees, very cheap I know. 🙊&lt;/p&gt;

&lt;div class=&quot;gallery&quot; data-rows=&quot;3&quot;&gt;
	&lt;img height=&quot;200&quot; width=&quot;400&quot; src=&quot;/assets/day-out-at-munroe/1.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/2.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/3.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We walked all the way from the railway station to the village, taking pictures in between and having fun. Our first stop was the Kalluvila Sreekrishna Temple. We saw this place in the Google Maps and planned to visit the temple. :innocent:&lt;/p&gt;

&lt;div class=&quot;gallery&quot; data-rows=&quot;2&quot;&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/5.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/7.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/8.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/6.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The temple was so peaceful and serene. It is located on the backwaters and the whole view was absolutely fanstastic. The temple is really beautiful which is perfectly standing on the banks of the backwaters. We stayed at the place for sometime and enjoyed the view.&lt;/p&gt;

&lt;div class=&quot;gallery&quot; data-rows=&quot;3&quot;&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/13.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/11.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/12.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/14.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We walked along the backwaters and by this time we are already hungry. We decided to eat the authentic Kerala fish food and selected a place according to the local’s opinion. We went to Ambu Lal’s Hotel. We were stuck on the other side of the backwater, he then came and took us to his place in his boat.&lt;/p&gt;

&lt;div class=&quot;gallery&quot; data-rows=&quot;3&quot;&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/15.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/16.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/17.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/18.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/19.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We had the best lunch so far. The perfect Kerala feast. I ate Karimeen, a type of freshwater fish, for the first time. It was really tasty.&lt;/p&gt;

&lt;div class=&quot;gallery&quot; data-rows=&quot;3&quot;&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/20.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/21.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Then we planned to go for boating after sometime. Untill they boat had arrived, we went out for a small walk to see what is around and found a really good view point there. We sat for sometime and we tried fishing too. But yeah we didn’t catch one, sed life. 😶&lt;/p&gt;

&lt;div class=&quot;gallery&quot; data-rows=&quot;4&quot;&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/23.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/22.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We went for boating later on. We got onto the small boat and we got paddles to row the boat. We were boating for two hours after that but it didn’t feel two hours has passed. We never got tired of rowing. We went through many waterways and the experience was absolutely unforgettable.&lt;/p&gt;

&lt;div class=&quot;gallery&quot; data-columns=&quot;3&quot;&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/30.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/31.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/32.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I have a few videos too, which I couldn’t upload it because of the size constraint. You can view them here in this &lt;a href=&quot;https://photos.app.goo.gl/EssbapdMEdvVY4s39&quot;&gt;Blog Photos Album&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;gallery&quot; data-columns=&quot;3&quot;&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/35.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/37.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/36.jpg&quot; /&gt;
	&lt;img height=&quot;200&quot; width=&quot;300&quot; src=&quot;/assets/day-out-at-munroe/38.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;After two hours of boating over there, we returned back to the place had lunch. We had snacks over there and the etta dropped us at the railway station and we headed back to Amritapuri, with the beautiful experiences of the day at Munroe. Next on list - Thanjavur, Gokarna and many more. 😁&lt;/p&gt;</content><author><name>Ajay prabhakar</name><email>ajayprabhakar369@gmail.com</email></author><summary type="html">Recently the amFOSS club members planned to keep a day off and plan for a trip. Upon Vipin Sir’s suggestion, six of us went to Munroe Island and spent a whole day there. I would like to share the experience of the trip in this blog post.</summary></entry><entry><title type="html">First post</title><link href="http://localhost:4000/blog/2018-12-16-First-post/" rel="alternate" type="text/html" title="First post" /><published>2018-12-16T00:00:00+05:30</published><updated>2018-12-16T00:00:00+05:30</updated><id>http://localhost:4000/blog/First-post</id><content type="html" xml:base="http://localhost:4000/blog/2018-12-16-First-post/">&lt;p&gt;Catching up with the apps, more appropriately the networking apps has become quite a challenge lately. While some recent ones are getting very popular, older ones are also holding their ground. Interestingly enough older ones are becoming mature as well whether or not they want to be. They are now getting called at the principal’s office and stuff. Seems like they’re now being treated like teenage crossed human beings who are anticipated to be more responsible.&lt;/p&gt;

&lt;p&gt;But anyway, back to the point for today — &lt;strong&gt;Complexity of Usage&lt;/strong&gt;. I don’t know about others, it takes quite some effort for me to gain the basic understanding of the latest apps. Let me give some example. Several months ago I was trying to figure out how to add a story in &lt;strong&gt;&lt;em&gt;Instagram&lt;/em&gt;&lt;/strong&gt;. I was going all over the icons and options and it was a thorny way to be honest. After 8-10 minutes of uttermost struggle, I was finally able to figure it out. And it was indeed an &lt;strong&gt;Aha&lt;/strong&gt; moment. Maybe that’s how the senior citizens feel when they figure out some &lt;strong&gt;&lt;em&gt;Facebook&lt;/em&gt;&lt;/strong&gt; stuff and now I know the feelings. With some sheer confidence by my side after cracking such complicated puzzle, I headed straight to the play store and installed &lt;strong&gt;&lt;em&gt;Snapchat&lt;/em&gt;&lt;/strong&gt; without any hesitation in mind. Only if I knew what was waiting ahead. The whole thing was complicated, the whole damn thing. Nothing was making any sense to me. I was ratted and completely demolished. But being a true supporter of Bangladesh National Cricket team, I didn’t lose hope. The optimistic part somewhere inside kept me from uninstalling it in hope that someday I’ll come again and conquer. I’m really happy to announce that &lt;strong&gt;someday&lt;/strong&gt; came true last week. It was an absolute &lt;strong&gt;Eureka&lt;/strong&gt; moment rest assured. I wouldn’t say everything makes complete sense now but I have the basic drills of doing stuffs. I’m in an &lt;strong&gt;okay-but-why&lt;/strong&gt; state now and in the process of convincing myself that’s the way it should be.&lt;/p&gt;</content><author><name>Ajay prabhakar</name><email>ajayprabhakar369@gmail.com</email></author><summary type="html">Catching up with the apps, more appropriately the networking apps has become quite a challenge lately. While some recent ones are getting very popular, older ones are also holding their ground. Interestingly enough older ones are becoming mature as well whether or not they want to be. They are now getting called at the principal’s office and stuff. Seems like they’re now being treated like teenage crossed human beings who are anticipated to be more responsible.</summary></entry><entry><title type="html">Example post 1</title><link href="http://localhost:4000/blog/2018-12-09-week-49/" rel="alternate" type="text/html" title="Example post 1" /><published>2018-12-09T00:00:00+05:30</published><updated>2018-12-09T00:00:00+05:30</updated><id>http://localhost:4000/blog/week-49</id><content type="html" xml:base="http://localhost:4000/blog/2018-12-09-week-49/">&lt;p&gt;I don’t have much in mind this week. Which means the hash value is going to be rather smaller. Meaning I need some extra padding with it for keeping the size consistent. I’ve always believed that I’m very bad in this business. Keeping it concise is my thing. At least my subconscious mind loves to think so. But wait, has it been always like this? After careful consideration I have figured out at least one aspect of my life where I was rather elaborate. It is none other than the exam papers up until I started my undergrad. “The customer is always right” and it’s even more prominent when the consumer is going to mark you. And also if the pen is mightier than the sword then the mark point must also be tougher than the gun point, right? That’s why we’re maybe even more concerned than the writers about the significance of the namings of their literatures. We’re more thoughtful about what they tried to mean with some specific lines and explain them in a way maybe they never even thought of. I’ve always wondered about the way they’d react if they could come to see our bisection of their writings. Would they be able to keep up with our level of expectation if they’d know what we think? Or would they go like, “We haven’t thought that far when writing, please believe!”? I guess we’ll never know the answer and on our defense, we were on mark point.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Life took another minor version bump after figuring out the fact that it is possible to set the timer to :90(90 seconds) instead of 1:30(1 minute and 30 seconds) in microwave oven(at least it’s true for the one I use) and that’s what I actually wanted to say this week.&lt;/p&gt;</content><author><name>Ajay prabhakar</name><email>ajayprabhakar369@gmail.com</email></author><summary type="html">I don’t have much in mind this week. Which means the hash value is going to be rather smaller. Meaning I need some extra padding with it for keeping the size consistent. I’ve always believed that I’m very bad in this business. Keeping it concise is my thing. At least my subconscious mind loves to think so. But wait, has it been always like this? After careful consideration I have figured out at least one aspect of my life where I was rather elaborate. It is none other than the exam papers up until I started my undergrad. “The customer is always right” and it’s even more prominent when the consumer is going to mark you. And also if the pen is mightier than the sword then the mark point must also be tougher than the gun point, right? That’s why we’re maybe even more concerned than the writers about the significance of the namings of their literatures. We’re more thoughtful about what they tried to mean with some specific lines and explain them in a way maybe they never even thought of. I’ve always wondered about the way they’d react if they could come to see our bisection of their writings. Would they be able to keep up with our level of expectation if they’d know what we think? Or would they go like, “We haven’t thought that far when writing, please believe!”? I guess we’ll never know the answer and on our defense, we were on mark point.</summary></entry><entry><title type="html">Example post 2</title><link href="http://localhost:4000/blog/2018-12-02-week-48/" rel="alternate" type="text/html" title="Example post 2" /><published>2018-12-02T00:00:00+05:30</published><updated>2018-12-02T00:00:00+05:30</updated><id>http://localhost:4000/blog/week-48</id><content type="html" xml:base="http://localhost:4000/blog/2018-12-02-week-48/">&lt;p&gt;Just came to understand lately that all lands are eventually islands. It is only the enclaves who are treated differently. My life will never be the same again. Natural minority I should say.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Rabindranath Tagore died in 1941. India, Sri Lanka and Bangladesh got independence respectively in 1947, 1948 and 1971. India’s and Bangladesh’s national anthems are written by Rabindranath Tagore while Sri Lanka’s national anthem is inspired by his work. So basically he’s written national anthems for the nations that were yet to be born without even knowing their names. What a visionary and what an absolute spoiler. I wonder if he put any “Spoiler Alert” tag before his compositions. Otherwise the British Empire mustn’t be very happy about it considering the amount of anger people convey these days when they get spoiler for just a movie or a TV show.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So the new YouTube Music app is on the market and the monthly subscription fee for the premium version costs more than the monthly subscription fee of Netflix or Amazon Prime. Is the music just gonna play on the mobile or the singers gonna come home for some live action as well? What am I missing here? YouTube Music and chill is on it’s way maybe!&lt;/p&gt;</content><author><name>Ajay prabhakar</name><email>ajayprabhakar369@gmail.com</email></author><summary type="html">Just came to understand lately that all lands are eventually islands. It is only the enclaves who are treated differently. My life will never be the same again. Natural minority I should say.</summary></entry></feed>